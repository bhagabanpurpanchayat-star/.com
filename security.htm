<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Bill Payment Module</title>
  <style>
    body { font-family: Arial, sans-serif; background: #2b2b2b; color: #eee; margin: 0; padding: 10px; font-size: 13px; }
    h2 { color: #fff; font-size: 18px; margin: 0 0 10px 0; }
    .toolbar { margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center; clear: both; }
    .toolbar input { padding: 4px; border-radius: 4px; border: 1px solid #555; width: 250px; font-size: 13px; }
    .toolbar button { padding: 6px 12px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; transition: background 0.3s ease; font-size: 13px; }
    .toolbar button:hover { background: #218838; }
    .spinner { width: 14px; height: 14px; border: 2px solid #fff; border-top: 2px solid transparent; border-radius: 50%; display: inline-block; animation: spin 0.8s linear infinite; }
    @keyframes spin { from { transform: rotate(0deg);} to { transform: rotate(360deg);} }

    .table-container { height: calc(100vh - 120px); overflow-y: auto; border: 1px solid #555; }
    table { width: 100%; border-collapse: collapse; font-size: 12px; }
    th, td { border: 1px solid #555; padding: 6px; text-align: center; white-space: normal; word-wrap: break-word; overflow-wrap: break-word; }
    thead th { position: sticky; top: 0; background: #003366; color: #fff; z-index: 2; font-size: 12px; }

    td:nth-child(3), th:nth-child(3),
    td:nth-child(4), th:nth-child(4) { width: 20px; max-width: 20px; }
    td:nth-child(6), th:nth-child(6) { width: 140px; max-width: 140px; }
    td:nth-child(7), th:nth-child(7) { width: 225px; max-width: 225px; }
    td:nth-child(9), th:nth-child(9) { width: 105px; max-width: 80px; }
    td:nth-child(10), th:nth-child(10) { width: 105px; max-width: 90px; }

    td:nth-child(n+12):nth-child(-n+22),
    th:nth-child(n+12):nth-child(-n+22) { min-width: 60px; }

    button.action-btn { padding: 4px 8px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; }
    #message { margin-bottom: 8px; padding: 8px; display: none; border-radius: 5px; font-weight: bold; text-align: center; font-size: 13px; }
    #message.success { background: #28a745; color: white; }
    #message.error { background: #dc3545; color: white; }
    #message.loading { background: #007bff; color: white; }

    td input, td select { width: 100%; box-sizing: border-box; font-size: 12px; padding: 4px; }
  </style>
</head>
<body>
  <h2>Security Money (SDM) Payment Module</h2>

  <div id="message"></div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="üîç Search by UNIQUE NIT, NIT, Vendor..." oninput="filterTable()" />
    <button id="refreshBtn" onclick="refreshData()">‚ü≥ Refresh</button>
  </div>

  <div class="table-container">
    <table id="dataTable">
      <thead>
        <tr>
          <th>Timestamp</th>
          <th>UNIQUE NIT</th>
          <th>NIT</th>
          <th>SL</th>
          <th>NIT DATE</th>
          <th>VENDOR</th>
          <th>Name of the work</th>
          <th>Source of Fund</th>
          <th>WORK ORDER NO</th>
          <th>WORK ORDER DATE</th>
          <th>ESTIMATE VALUE</th>
          <th>GROSS BILL</th>
          <th>Completion Date</th>
          <th>SECURITY</th>
          <th>PAYMENT MODE</th>
          <th>REFERENCE</th>
          <th>SECURITY PAYMENT DATE</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <script>
    const scriptURL = "https://script.google.com/macros/s/AKfycbzLtoqAZC_Rv0nCDHgzac-GEYOMqaDTjC49Of2vmnptBeO9oVJRzIQ9rp8hd-bSBZA2sw/exec";
    let tableData = [];
    let securityIndex = 13;

    function formatDisplayDate(value) {
      if (!value) return "";
      const d = new Date(value);
      if (isNaN(d.getTime())) return value;
      const day = String(d.getDate()).padStart(2, "0");
      const month = String(d.getMonth() + 1).padStart(2, "0");
      const year = d.getFullYear();
      return `${day}/${month}/${year}`;
    }

    function formatTimestamp(value) {
      if (!value) return "";
      const d = new Date(value);
      if (isNaN(d.getTime())) return value;
      const day = String(d.getDate()).padStart(2, "0");
      const month = String(d.getMonth() + 1).padStart(2, "0");
      const year = d.getFullYear();
      const hours = String(d.getHours()).padStart(2, "0");
      const minutes = String(d.getMinutes()).padStart(2, "0");
      const seconds = String(d.getSeconds()).padStart(2, "0");
      return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
    }

    function getDurationText(dateStr) {
      try {
        const [day, month, year] = dateStr.split("/").map(Number);
        const past = new Date(year, month - 1, day);
        const now = new Date();
        if (isNaN(past.getTime())) return "";

        let years = now.getFullYear() - past.getFullYear();
        let months = now.getMonth() - past.getMonth();
        let days = now.getDate() - past.getDate();

        if (days < 0) {
          months--;
          const prevMonth = new Date(now.getFullYear(), now.getMonth(), 0);
          days += prevMonth.getDate();
        }
        if (months < 0) {
          years--;
          months += 12;
        }

        let parts = [];
        if (years > 0) parts.push(`${years} year${years > 1 ? "s" : ""}`);
        if (months > 0) parts.push(`${months} month${months > 1 ? "s" : ""}`);
        if (days > 0) parts.push(`${days} day${days > 1 ? "s" : ""}`);
        return parts.length ? parts.join(" ") : "0 days";
      } catch {
        return "";
      }
    }

    async function refreshData() {
      const btn = document.getElementById("refreshBtn");
      const oldText = btn.innerHTML;
      btn.innerHTML = `<span class="spinner"></span> Refreshing...`;
      btn.disabled = true;
      showMessage("Refreshing data...", "loading");
      await loadData();
      btn.innerHTML = oldText;
      btn.disabled = false;
      showMessage("Data loaded successfully ‚úÖ", "success");
    }

    async function loadData() {
      const res = await fetch(scriptURL + "?action=getBillPaymentData");
      let json = await res.json();

      if (Array.isArray(json) && json.length > 0) {
        const headerRow = json[0].map(h => h.toString().trim().toLowerCase());
        const secIdx = headerRow.indexOf("security");
        if (secIdx !== -1) {
          securityIndex = secIdx;
          json = json.slice(1);
        }
      }

      tableData = json;
      const filteredData = tableData.filter(row => row[securityIndex] && row[securityIndex].toString().trim() !== "");
      renderTable(filteredData);
    }

    function renderTable(data) {
      const tbody = document.querySelector("#dataTable tbody");
      tbody.innerHTML = "";

      if (!data.length) {
        tbody.innerHTML = `<tr><td colspan="18" style="color:#ff6666; font-weight:bold;">‚ö† No records found with SECURITY value</td></tr>`;
        return;
      }

      data.forEach((row, i) => {
        let tr = document.createElement("tr");

        for (let j = 0; j <= 12; j++) {
          let td = document.createElement("td");
          let cellValue = row[j] ?? "";

          if (j === 0) cellValue = formatTimestamp(cellValue);
          if (j === 9 || j === 12) {
            cellValue = formatDisplayDate(cellValue);

            if (j === 12 && cellValue) {
              const duration = getDurationText(cellValue);
              td.innerHTML = `${cellValue}<br><span style="color:#80ff80; font-size:11px;">(${duration})</span>`;
            } else {
              td.textContent = cellValue;
            }
          } else {
            td.textContent = cellValue;
          }

          tr.appendChild(td);
        }

        for (let j = 13; j <= 16; j++) {
          let td = document.createElement("td");
          let value = row[j] || "";

          if (j === 13) {
            td.textContent = value;
          } 
          else if (j === 14) {
            td.innerHTML = `
              <select id="col_${i}_${j}" onchange="toggleButton(${i})">
                <option value="">Select</option>
                <option value="Cheque" ${value === "Cheque" ? "selected" : ""}>Cheque</option>
                <option value="Online" ${value === "Online" ? "selected" : ""}>Online</option>
              </select>`;
          } 
          else if (j === 16) {
            const formattedDate = formatToInputDate(value);
            td.innerHTML = `<input type="date" value="${formattedDate}" id="col_${i}_${j}" oninput="toggleButton(${i})">`;
          } 
          else {
            td.innerHTML = `<input type="text" value="${value}" id="col_${i}_${j}" oninput="toggleButton(${i})">`;
          }

          tr.appendChild(td);
        }

        let tdAction = document.createElement("td");
        tdAction.innerHTML = `<button class="action-btn" id="btn_${i}" onclick="updateRow(${i})">SAVE</button>`;
        tr.appendChild(tdAction);

        tbody.appendChild(tr);
        toggleButton(i);
      });
    }

    function formatToInputDate(value) {
      if (!value) return "";
      const d = new Date(value);
      if (isNaN(d.getTime())) return "";
      return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}-${String(d.getDate()).padStart(2, "0")}`;
    }

    function filterTable() {
      const search = document.getElementById("searchInput").value.toLowerCase();
      const filtered = tableData
        .filter(row => row[securityIndex] && row[securityIndex].toString().trim() !== "")
        .filter(row =>
          (row[1] && row[1].toString().toLowerCase().includes(search)) ||
          (row[2] && row[2].toString().toLowerCase().includes(search)) ||
          (row[5] && row[5].toString().toLowerCase().includes(search))
        );
      renderTable(filtered);
    }

    function toggleButton(i) {
      const btn = document.getElementById(`btn_${i}`);
      if (!btn) return;
      btn.textContent = "UPDATE";
      btn.style.background = "blue";
      btn.style.color = "white";
    }

    function showMessage(text, type) {
      const msg = document.getElementById("message");
      msg.textContent = text;
      msg.className = type;
      msg.style.display = "block";
      setTimeout(() => { msg.style.display = "none"; }, 2500);
    }

    async function updateRow(i) {
      const btn = document.getElementById(`btn_${i}`);
      btn.disabled = true; btn.textContent = "Saving...";

      try {
        const formData = new FormData();
        formData.append("action","updateBillPayment");
        formData.append("rowIndex", i);

        for (let j = 13; j <= 16; j++) {
          const el = document.getElementById(`col_${i}_${j}`);
          formData.append(`col${j}`, el ? el.value : "");
        }

        const res = await fetch(scriptURL,{method:"POST",body:formData});
        const result = await res.json();

        if (result.success) {
          btn.textContent = "Saved ‚úî"; btn.style.background = "green";
          showMessage(`Row ${result.row} updated successfully ‚úÖ`,"success");
          const rowEl = btn.closest("tr");
          rowEl.style.backgroundColor = "#d4edda";
          setTimeout(()=>{rowEl.style.backgroundColor=""; toggleButton(i);},1500);
        } else {
          btn.textContent = "Failed ‚úñ"; btn.style.background = "red";
          showMessage("Update failed: " + (result.error || "Unknown"), "error");
        }
      } catch (err) {
        btn.textContent = "Error ‚úñ"; btn.style.background = "red";
        showMessage("Network error: " + err.message, "error");
      } finally {
        setTimeout(()=>{btn.disabled=false; toggleButton(i);},2000);
      }
    }

    loadData();
  </script>
</body>
</html>
